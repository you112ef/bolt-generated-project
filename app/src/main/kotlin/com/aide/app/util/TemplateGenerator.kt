package com.aide.app.util

import android.content.Context
import java.io.File

enum class ProjectTemplateType { KotlinAndroidCompose, Flutter, KotlinConsole, Node, Python, SampleNotesExpenses }

object TemplateGenerator {
	fun baseProjectsDir(context: Context): File = File(context.filesDir, "projects").also { it.mkdirs() }

	fun generateProject(context: Context, name: String, type: ProjectTemplateType, prompt: String?): File {
		val root = File(baseProjectsDir(context), sanitize(name)).also { it.mkdirs() }
		when (type) {
			ProjectTemplateType.KotlinAndroidCompose -> writeAndroidCompose(root, name, prompt)
			ProjectTemplateType.Flutter -> writeFlutterSkeleton(root, name, prompt)
			ProjectTemplateType.KotlinConsole -> writeKotlinConsole(root, name, prompt)
			ProjectTemplateType.Node -> writeNode(root, name, prompt)
			ProjectTemplateType.Python -> writePython(root, name, prompt)
			ProjectTemplateType.SampleNotesExpenses -> writeNotesExpensesSample(root, name)
		}
		File(root, "README.md").writeText("""# $name\n\nGenerated by AIDE.\n\nType: $type\n\n${prompt.orEmpty()}\n""".trimIndent())
		return root
	}

	private fun sanitize(name: String): String = name.lowercase().replace(Regex("[^a-z0-9-_]+"), "-").trim('-')

	private fun writeAndroidCompose(root: File, appName: String, prompt: String?) {
		val appDir = File(root, "android-app").also { it.mkdirs() }
		File(appDir, "build.gradle.kts").writeText("""
			plugins { id("com.android.application"); id("org.jetbrains.kotlin.android") }
			android { namespace = "com.example.${sanitize(appName)}" }
		""".trimIndent())
		File(appDir, "src/main/AndroidManifest.xml").apply { parentFile.mkdirs() }
			.writeText("""
				<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.example.${sanitize(appName)}\" />
			""".trimIndent())
	}

	private fun writeFlutterSkeleton(root: File, appName: String, prompt: String?) {
		val dir = File(root, "flutter").also { it.mkdirs() }
		File(dir, "pubspec.yaml").writeText("""
			name: ${sanitize(appName)}
			description: Generated by AIDE
			sdk: ">=3.0.0 <4.0.0"
		""".trimIndent())
		File(dir, "lib").mkdirs()
		File(dir, "lib/main.dart").writeText("""
			import 'package:flutter/material.dart';
			void main() => runApp(const MaterialApp(home: Scaffold(body: Center(child: Text('Hello from AIDE')))));
		""".trimIndent())
	}

	private fun writeKotlinConsole(root: File, appName: String, prompt: String?) {
		val dir = File(root, "kotlin-console").also { it.mkdirs() }
		File(dir, "Main.kt").writeText("""
			fun main() { println("Hello $appName from AIDE") }
		""".trimIndent())
	}

	private fun writeNode(root: File, appName: String, prompt: String?) {
		val dir = File(root, "node").also { it.mkdirs() }
		File(dir, "package.json").writeText("""{ "name": "${sanitize(appName)}", "version": "0.1.0" }""")
		File(dir, "index.js").writeText("console.log('Hello from AIDE');\n")
	}

	private fun writePython(root: File, appName: String, prompt: String?) {
		val dir = File(root, "python").also { it.mkdirs() }
		File(dir, "main.py").writeText("print('Hello from AIDE')\n")
	}

	private fun writeNotesExpensesSample(root: File, appName: String) {
		val dir = File(root, "sample").also { it.mkdirs() }
		File(dir, "README.md").writeText("""Sample: Notes + Expenses (offline)\n- Entities: Note, Expense\n- Storage: Room\n""".trimIndent())
	}
}