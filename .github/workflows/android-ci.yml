name: Android CI

on:
  push:
    branches: [ main, cursor/** ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      GRADLE_OPTS: "-Dorg.gradle.logging.stacktrace=all -Dorg.gradle.console=plain -Dorg.gradle.warning.mode=all -Dkotlin.incremental=false"
    
    steps:
      - name: 📥 Checkout Repository (no external actions)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "::group::Checkout"
          git init .
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git fetch --no-tags --prune --depth=1 origin "$GITHUB_SHA"
          git checkout --force FETCH_HEAD
          git submodule sync --recursive || true
          git -c protocol.version=2 submodule update --init --force --recursive || true
          echo "::endgroup::"

      - name: ☕ Install JDK 17 (no external actions)
        shell: bash
        run: |
          set -euo pipefail
          echo "::group::Install JDK 17"
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk-headless
          JAVA_HOME_DIR=$(dirname $(dirname $(readlink -f $(which javac))))
          echo "JAVA_HOME=$JAVA_HOME_DIR" >> "$GITHUB_ENV"
          echo "$JAVA_HOME_DIR/bin" >> "$GITHUB_PATH"
          java -version
          echo "::endgroup::"

      - name: 🤖 Ensure Android SDK (no external actions)
        shell: bash
        run: |
          set -euo pipefail
          echo "::group::Ensure Android SDK"
          DEFAULT_SDK="/usr/local/lib/android/sdk"
          SDK_DIR="${ANDROID_HOME:-${ANDROID_SDK_ROOT:-$DEFAULT_SDK}}"
          if [ ! -d "$SDK_DIR" ]; then
            echo "Android SDK not found at $SDK_DIR; installing cmdline-tools locally..."
            SDK_DIR="$HOME/android-sdk"
            mkdir -p "$SDK_DIR/cmdline-tools"
            curl -sSL -o /tmp/cmdline-tools.zip "https://dl.google.com/android/repository/commandlinetools-linux-12266719_latest.zip"
            unzip -q -o /tmp/cmdline-tools.zip -d "$SDK_DIR/cmdline-tools"
            if [ -d "$SDK_DIR/cmdline-tools/cmdline-tools" ]; then
              mv "$SDK_DIR/cmdline-tools/cmdline-tools" "$SDK_DIR/cmdline-tools/latest"
            fi
          fi
          echo "ANDROID_HOME=$SDK_DIR" >> "$GITHUB_ENV"
          echo "ANDROID_SDK_ROOT=$SDK_DIR" >> "$GITHUB_ENV"
          echo "$SDK_DIR/platform-tools" >> "$GITHUB_PATH"
          echo "Using ANDROID_HOME=$SDK_DIR"
          echo "::endgroup::"

      - name: 📝 Create local.properties
        shell: bash
        run: |
          SDK_DIR="${ANDROID_HOME:-${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}}"
          echo "🔧 Creating local.properties with Android SDK path: $SDK_DIR"
          echo "sdk.dir=$SDK_DIR" > local.properties
          # Export ANDROID_HOME to ensure consistency across steps
          echo "ANDROID_HOME=$SDK_DIR" >> "$GITHUB_ENV"
          echo "✅ Created local.properties:"
          cat local.properties

      - name: ✅ Accept Android SDK Licenses
        shell: bash
        run: |
          set -e  # Exit on error
          export ANDROID_HOME="${ANDROID_HOME:-${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}}"
          echo "🔧 ANDROID_HOME is set to: $ANDROID_HOME"
          
          # Verify Android SDK installation
          if [ ! -d "$ANDROID_HOME" ]; then
            echo "❌ ERROR: ANDROID_HOME directory does not exist: $ANDROID_HOME"
            exit 1
          fi
          
          # Find the correct sdkmanager path
          SDKMANAGER_PATH=""
          if [ -x "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMANAGER_PATH="$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
          elif [ -x "$ANDROID_HOME/cmdline-tools/16.0/bin/sdkmanager" ]; then
            SDKMANAGER_PATH="$ANDROID_HOME/cmdline-tools/16.0/bin/sdkmanager"
          elif command -v sdkmanager >/dev/null 2>&1; then
            SDKMANAGER_PATH="$(command -v sdkmanager)"
          fi
          
          if [ -n "$SDKMANAGER_PATH" ]; then
            echo "📱 Using sdkmanager at: $SDKMANAGER_PATH"
            echo "✅ Accepting all Android SDK licenses..."
            yes | timeout 300 "$SDKMANAGER_PATH" --licenses >/dev/null 2>&1 || true
            echo "🎉 License acceptance completed."
          else
            echo "❌ ERROR: Could not find sdkmanager"
            echo "Available files in cmdline-tools:"
            find "$ANDROID_HOME" -name "sdkmanager" 2>/dev/null || echo "No sdkmanager found"
            exit 1
          fi

      - name: 📦 Install Android packages
        shell: bash
        run: |
          set -e
          export ANDROID_HOME="${ANDROID_HOME:-${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}}"
          
          SDKMANAGER_PATH=""
          if [ -x "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMANAGER_PATH="$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
          elif [ -x "$ANDROID_HOME/cmdline-tools/16.0/bin/sdkmanager" ]; then
            SDKMANAGER_PATH="$ANDROID_HOME/cmdline-tools/16.0/bin/sdkmanager"
          elif command -v sdkmanager >/dev/null 2>&1; then
            SDKMANAGER_PATH="$(command -v sdkmanager)"
          fi
          
          if [ -z "$SDKMANAGER_PATH" ]; then
            echo "❌ ERROR: Could not find sdkmanager for package installation"
            exit 1
          fi
          
          echo "📦 Installing: platform-tools, platforms;android-34, build-tools;34.0.0"
          yes | "$SDKMANAGER_PATH" --install \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            --sdk_root="$ANDROID_HOME" || true
          echo "✅ Package installation step finished"

      - name: 🔧 Prepare Gradle wrapper
        shell: bash
        run: |
          set -e
          chmod +x ./gradlew || true

      - name: 📋 Gradle Info
        run: |
          echo "🔍 Gradle Version:"
          ./gradlew --version || echo "Failed to get Gradle version"
          echo ""
          echo "🔍 Project Info:"
          ./gradlew projects || echo "Failed to list projects"

      - name: 🧹 Clean Project
        run: |
          echo "🧹 Cleaning project..."
          ./gradlew clean --no-daemon --stacktrace --info
          echo "✅ Clean completed"

      - name: 🔨 Build Debug APK
        run: |
          echo "🏗️ Building Debug APK..."
          ./gradlew assembleDebug --no-daemon --stacktrace --warning-mode all --console=plain --info
          echo "✅ Build completed"
          
      - name: 🧪 Run Unit Tests
        continue-on-error: true
        run: |
          echo "🧪 Running Unit Tests..."
          ./gradlew testDebugUnitTest --no-daemon --stacktrace --continue || echo "Some tests failed, but continuing..."
          
      - name: 📊 Generate Test Reports
        if: always()
        run: |
          echo "📊 Looking for test reports..."
          find . -name "*.html" -path "*/reports/tests/*" | head -5 || echo "No test reports found"
          echo "📁 Available report directories:"
          find . -type d -name "reports" 2>/dev/null || echo "No reports directories found"

      - name: 📱 List Generated APKs
        run: |
          echo "📱 Looking for APK files..."
          find . -name "*.apk" -type f -exec ls -lh {} \; || echo "No APK files found"
          echo "📁 APK output directories:"
          find . -type d -path "*/outputs/apk/*" 2>/dev/null || echo "No APK output directories found"
          
      # Note: Upload steps removed due to policy: only actions from owner are allowed.

      - name: 📈 Build Summary
        if: always()
        run: |
          echo "## 🎯 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if APK was built successfully
          APK_FOUND=false
          if find app/build/outputs/apk/debug/ -name "*.apk" -type f 2>/dev/null | head -1 | read APK_FILE; then
            APK_SIZE=$(du -h "$APK_FILE" | cut -f1)
            APK_NAME=$(basename "$APK_FILE")
            echo "✅ **Build Status**: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "📱 **APK Size**: $APK_SIZE" >> $GITHUB_STEP_SUMMARY
            echo "📦 **APK Name**: \`$APK_NAME\`" >> $GITHUB_STEP_SUMMARY
            echo "📁 **APK Location**: \`app/build/outputs/apk/debug/$APK_NAME\`" >> $GITHUB_STEP_SUMMARY
            APK_FOUND=true
          fi
          
          if [ "$APK_FOUND" = false ]; then
            echo "❌ **Build Status**: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "🔍 **Debug Info**:" >> $GITHUB_STEP_SUMMARY
            echo "- No APK files found in app/build/outputs/apk/debug/" >> $GITHUB_STEP_SUMMARY
            echo "- Check build logs for compilation errors" >> $GITHUB_STEP_SUMMARY
            echo "- Verify Android SDK is properly configured" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Repository**: [AIDE Android App](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "🌟 **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "🏃 **Run Number**: \`${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY